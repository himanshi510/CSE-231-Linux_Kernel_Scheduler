diff --git c/linux-5.14.13/arch/x86/entry/syscalls/syscall_64.tbl d/linux-5.14.13/arch/x86/entry/syscalls/syscall_64.tbl
index 60f28c8..f6b5779 100644
--- c/linux-5.14.13/arch/x86/entry/syscalls/syscall_64.tbl
+++ d/linux-5.14.13/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,7 +369,7 @@
 445	common	landlock_add_rule	sys_landlock_add_rule
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
-448	common	reduce_time		sys_reduce_time
+
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git c/linux-5.14.13/include/linux/sched.h d/linux-5.14.13/include/linux/sched.h
index c8686e1..8e10c7a 100644
--- c/linux-5.14.13/include/linux/sched.h
+++ d/linux-5.14.13/include/linux/sched.h
@@ -470,7 +470,6 @@ struct sched_entity {
 	unsigned int			on_rq;
 
 	u64				exec_start;
-	u64				delay;
 	u64				sum_exec_runtime;
 	u64				vruntime;
 	u64				prev_sum_exec_runtime;
diff --git c/linux-5.14.13/kernel/sched/core.c d/linux-5.14.13/kernel/sched/core.c
index b5e9ad3..399c37c 100644
--- c/linux-5.14.13/kernel/sched/core.c
+++ d/linux-5.14.13/kernel/sched/core.c
@@ -3949,14 +3949,13 @@ int wake_up_state(struct task_struct *p, unsigned int state)
 static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 {
 	p->on_rq			= 0;
-	p->se.delay=0;
+
 	p->se.on_rq			= 0;
 	p->se.exec_start		= 0;
 	p->se.sum_exec_runtime		= 0;
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
-	
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff --git c/linux-5.14.13/kernel/sched/fair.c d/linux-5.14.13/kernel/sched/fair.c
index 769d6c9..423ec67 100644
--- c/linux-5.14.13/kernel/sched/fair.c
+++ d/linux-5.14.13/kernel/sched/fair.c
@@ -790,42 +790,6 @@ static void update_tg_load_avg(struct cfs_rq *cfs_rq)
 /*
  * Update the current task's runtime statistics.
  */
-#define SYS_reduce_time 449
-// static void update_curr1(struct cfs_rq *cfs_rq, int f)
-// {
-// 	struct sched_entity *curr = cfs_rq->curr;
-// 	u64 now = rq_clock_task(rq_of(cfs_rq));
-// 	u64 delta_exec;
-
-// 	if (unlikely(!curr))
-// 		return;
-// 	curr->exec_start+=10;
-// 	delta_exec = now - curr->exec_start;
-// 	// syscall(SYS_reduce_time, 100,10);
-// 	if (unlikely((s64)delta_exec <= 0))
-// 		return;
-
-// 	curr->exec_start = now;
-
-// 	schedstat_set(curr->statistics.exec_max,
-// 		      max(delta_exec, curr->statistics.exec_max));
-
-// 	curr->sum_exec_runtime += delta_exec;
-// 	schedstat_add(cfs_rq->exec_clock, delta_exec);
-
-// 	curr->vruntime += calc_delta_fair(delta_exec, curr);
-// 	update_min_vruntime(cfs_rq);
-
-// 	if (entity_is_task(curr)) {
-// 		struct task_struct *curtask = task_of(curr);
-
-// 		trace_sched_stat_runtime(curtask, delta_exec, curr->vruntime);
-// 		cgroup_account_cputime(curtask, delta_exec);
-// 		account_group_exec_runtime(curtask, delta_exec);
-// 	}
-
-// 	account_cfs_rq_runtime(cfs_rq, delta_exec);
-// }
 static void update_curr(struct cfs_rq *cfs_rq)
 {
 	struct sched_entity *curr = cfs_rq->curr;
@@ -834,11 +798,8 @@ static void update_curr(struct cfs_rq *cfs_rq)
 
 	if (unlikely(!curr))
 		return;
-		// int f=cfs_rq->flag;
-		// if(f==1){curr->exec_start+=10;}
 
 	delta_exec = now - curr->exec_start;
-	// syscall(SYS_reduce_time, 100,10);
 	if (unlikely((s64)delta_exec <= 0))
 		return;
 
@@ -851,8 +812,6 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
-	curr->vruntime+=curr->delay;
-	
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
diff --git c/linux-5.14.13/kernel/sys.c d/linux-5.14.13/kernel/sys.c
index b5dee33..6ec5092 100644
--- c/linux-5.14.13/kernel/sys.c
+++ d/linux-5.14.13/kernel/sys.c
@@ -631,34 +631,6 @@ error:
 	return retval;
 }
 
-
-SYSCALL_DEFINE3(kernel_2d_memcpy,float *,a1,float *,a2,int, len)
-{
-	float arr1[5][5];
-	if(__copy_from_user(arr1,a1,len))
-	{
-		return -EFAULT;
-
-	}
-
-	if(__copy_to_user(a2,arr1,len))
-	{
-		return -EFAULT;
-	}
-
-	return len;
-}
-SYSCALL_DEFINE2(reduce_time, int, pid, u64, delay)
-{
-	if(pid>2147483647||pid<1)
-   {return -1;}
-	struct task_struct *task = pid_task(find_vpid(pid),PIDTYPE_PID);
-	struct sched_entity *vak = &(task->se);
-    vak->delay =delay;
-	return delay;
-
-	
-}
 SYSCALL_DEFINE1(setuid, uid_t, uid)
 {
 	return __sys_setuid(uid);
